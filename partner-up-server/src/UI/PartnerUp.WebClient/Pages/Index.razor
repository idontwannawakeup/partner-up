@page "/"
@layout EmptyLayout
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedLocalization> SharedLocalizer
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="@MaxWidth.ExtraSmall">

    <MudText Class="mt-10 py-1" Typo="@Typo.h3" Align="@Align.Center">
        @Localizer["UserGreeting"]
    </MudText>

    <MudText Class="py-1" Typo="@Typo.subtitle1" Align="@Align.Center">
        @Localizer["Welcome"]
    </MudText>

    @if (_signInLink != null)
    {
        <MudButton Link="@_signInLink"
                   Class="my-2 py-2"
                   Color="@Color.Primary"
                   Variant="@Variant.Filled"
                   FullWidth="@true">
            @SharedLocalizer["SignIn"]
        </MudButton>
    }

    @* <MudButton Link="/signUp" *@
    @*            Class="my-2 py-2" *@
    @*            Color="@Color.Primary" *@
    @*            Variant="@Variant.Filled" *@
    @*            FullWidth="@true"> *@
    @*     @SharedLocalizer["SignUp"] *@
    @* </MudButton> *@

</MudContainer>

@code {

    private string _signInLink;

    [CascadingParameter] private Task<AuthenticationState> StateAsync { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _signInLink = $"/signin?redirectUri={Uri.EscapeDataString(NavigationManager.Uri)}";

        var state = await StateAsync;
        var isAuthenticated = state.User.Identity is { IsAuthenticated: true };
        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("/home");
        }
    }

}
